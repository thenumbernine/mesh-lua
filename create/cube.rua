#!/usr/bin/env rua
-- create a cube, writes it to fn
local vec3f = require 'vec-ffi.vec3f'
local Mesh = require 'mesh'
local fn = ...
assert(fn, "expected filename")
local uvs = {{0,0}, {1,0}, {1,1}, {0,1}}
local tris = {0, 1, 2, 2, 3, 0}
local oppotris = table(tris):reverse()
local m = Mesh()
for side=0,2 do
	local side2 = (side+1)%3
	local side3 = (side2+1)%3
	for pm=0,1 do
		local n = vec3f()
		n.s[side] = pm * 2 - 1
		local basevtx = #m.vtxs
		for _,triIndex in ipairs(pm == 0 and tris or oppotris) do
			m.triIndexes:push_back(basevtx + triIndex)
		end	
		for _,uv in ipairs(uvs) do
			local corner = (pm << side)
				| (uv[1] << side2)
				| (uv[2] << side3)
			local v = m.vtxs:emplace_back()
			v.pos:set(
				corner & 1,
				(corner >> 1) & 1,
				(corner >> 2) & 1
			)
			v.texcoord:set(uv[1], uv[2], 0)
			v.normal:set(n)
		end
	end
end
m:rebuildTris()
m.groups:insert{
	name = 'm',
	triFirstIndex = 0,
	triCount = #m.tris,
}
m:assertGroups()
require 'mesh.objloader'():save(fn, m)
